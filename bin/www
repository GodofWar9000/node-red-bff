
/**
 * Module dependencies.
 */
console.log ("Starting node-red-service .....")

var application = require('../app');
var debug = require('debug')('service:server');
var http = require('http');
var express = require('express');

// the instance of node-red
RED = application.RED;
// the express application
app = application.expressApp;
// the http server
server =application.server
/**
 * Get the HTTP server associated with the Express App
 */






/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.OPENSHIFT_NODEJS_PORT || process.env.PORT || '8080');
var ipaddress = process.env.OPENSHIFT_NODEJS_IP || "0.0.0.0";

app.set('port', port);

app.set('ipaddress', ipaddress);


console.log (`Trying to listening on: ${ipadress}:${port}`)



/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  console.log('Listening on ' + bind);
}



// // Start the runtime
// RED.start().then(embeddedStart(RED, 5)).then((result) => {
//   // result is whatever RED.start() resolved to
//   // RED.nodes.getFlows() etc are now ready to use
  
//   var os = RED.nodes.getContext().global.get('os')

//   console.log ("Node red flows have been started on + http://0.0.0.0:" + port+"/editor");

//   console.log(RED.nodes.getFlows());
// }).catch((err) => {
//   if (/^timed out/.test(err.message)) {
//       // embeddedStart() timed out
//       // the value that RED.start() resolved to is available as err.result
//   }
// });

RED.start().then((result) => {
  // result is whatever RED.start() resolved to
  // RED.nodes.getFlows() etc are now ready to use
  
  var os = RED.nodes.getContext().global.get('os')

  console.log ("Node red flows have been started on + http://0.0.0.0:" + port+"/editor");

  console.log(RED.nodes.getFlows());
}).catch((err) => {
  if (/^timed out/.test(err.message)) {
      // embeddedStart() timed out
      // the value that RED.start() resolved to is available as err.result
  }
});